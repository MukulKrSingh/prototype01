// Code generated by gqlgen, DO NOT EDIT.
// This is a mock file for Step 1 setup that will be replaced by actual generated code in Step 2.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// This file will be replaced by actual generated code in Step 2
// These are placeholder types to make the application compile

// ExecutableSchema is the interface implemented by generated GraphQL server
type ExecutableSchema interface {
	graphql.ExecutableSchema
}

// Config is a mock configuration
type Config struct {
	Resolvers interface{}
}

// NewExecutableSchema creates a new instance of mock ExecutableSchema
func NewExecutableSchema(config Config) ExecutableSchema {
	return &executableSchema{config: config}
}

type executableSchema struct {
	config Config
}

func (e *executableSchema) Schema() *ast.Schema {
	return &ast.Schema{}
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, fieldName string, childScore int, args map[string]any) (int, bool) {
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	return func(ctx context.Context) *graphql.Response {
		return &graphql.Response{
			Data: []byte(`{"ping": "GraphQL Server is running!"}`),
		}
	}
}

// ParseQuery parses a GraphQL query string
func (e *executableSchema) Parse(ctx context.Context, cache map[string]*ast.QueryDocument, gqlQuery string) (*ast.QueryDocument, error) {
	return &ast.QueryDocument{}, nil
}

// Validate validates the GraphQL query document
func (e *executableSchema) Validate(ctx context.Context) []error {
	return nil
}
